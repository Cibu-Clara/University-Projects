The words - predefined tokens are specified between " and ":
Sintactical rules: (file Syntax.in)
program ::= "prog" "{" stmtlist "}"
declaration ::= IDENTIFIER ":" type
type1 ::= "int" | "real" | "str" |"char" | "bool"
arraydecl ::= "arr" "(" type1 ")" "[" CONSTANT "]"
type  ::= type1 | arraydecl
stmtlist ::= stmt | stmt stmtlist
stmt ::= simplstmt | structstmt
simplstmt ::= declaration | assignstmt | iostmt | radstmt
assignstmt ::= IDENTIFIER "=" expression
expression ::= term | expression operator term
operator ::= "+" | "-" | "*" | "/" | "%"
term ::= IDENTIFIER | CONSTANT | "-" IDENTIFIER | factor
factor ::= - IDENTIFIER | radstmt | IDENTIFIER "[" IDENTIFIER "]" | IDENTIFIER "[" CONSTANT "]" | "(" expression ")"
iostmt ::= "sys" "." "read" "(" IDENTIFIER ")" | "sys" "." "write" "(" IDENTIFIER ")" | "sys" "." "write" "(" CONSTANTA ")" | "sys" "." "write" "(" endl ")"
radstmt ::= "rad" "(" IDENTIFIER ")"
structstmt ::= ifstmt | whilestmt
ifstmt ::= "if" condition "begin" ":" stmtlist "end" ";"
ifstmt ::= "if" condition "begin" ":" stmtlist "else" "begin" ":" stmtlist "end" ";"
whilestmt ::= "while" condition "begin" ":" stmtlist "end" ";"
condition ::= expression RELATION expression | condition "and" condition | condition "or" condition
RELATION ::= "<" |  ">" | "==" | "=" | ">=" | "<=" | "!="