;Read from the console the name of a file. 
;Read the contents of the file and calculate its length in bytes. 
;Add at the end of the file content this size.

bits 32 ; assembling for the 32 bits architecture

; declare the EntryPoint (a label defining the very first instruction of the program)
global start        

; declare external functions needed by our program
extern exit, scanf, fopen, fclose, fread, fprintf               ; tell nasm that exit exists even if we won't be defining it
import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll                       ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
import fopen msvcrt.dll  
import fclose msvcrt.dll
import scanf msvcrt.dll
import fread msvcrt.dll
import fprintf msvcrt.dll
                          
; our data is declared here (the variables needed by our program)
segment data use32 class=data
    file_name times 50 db 0
    string_format db "%s", 0
    file_descriptor dd -1
    access_mode db "a+", 0
    len equ 100
    text times (len+1) db 0
    file_size dd 0
    print_format db " %d", 0

; our code starts here
segment code use32 class=code
    start:
        ;scanf("%s", &file_name)
        push dword file_name
        push dword string_format
        call [scanf]
        add esp, 4*2
        
        ;fopen(&filename, &access_mode)
        push dword access_mode
        push dword file_name
        call [fopen]
        add esp, 4*2
        
        ;check the file_descriptor
        cmp eax, 0
        je file_error
        mov dword[file_descriptor], eax
        
        ;reset eax
        mov eax, 0
        
        ;eax=fread(text, 1, len, file_descriptor)
        push dword [file_descriptor]
        push dword len
        push dword 1 
        push dword text        
        call [fread]
        add esp, 4*4
        
        ;append number of chars to the file
        mov dword[file_size], eax
        
        push dword [file_size]
        push dword print_format
        push dword [file_descriptor]
        call [fprintf]
        add esp, 4*3
        
        ;close the file
        push dword [file_descriptor]
        call [fclose]
        add esp, 4*1
    
        file_error:
    
        ; exit(0)
        push    dword 0      ; push the parameter for exit onto the stack
        call    [exit]       ; call exit to terminate the program
